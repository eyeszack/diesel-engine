includeTargets << gant.targets.Clean
cleanPattern << ['**/*.class', '**/*.jar']
cleanDirectory << ['build/classes/me', 'build/test/classes/me']
clobberDirectory << ['build', 'dist']

sourceDirectory = 'src/main/groovy'
buildDirectory = 'build/classes'
testBuildDirectory = 'build/test/classes'
distDirectory = 'dist'
testDirectory = 'src/test/groovy'

version = '1.1.0'
    
target(init:'Create directories for builds.') {
    ant.mkdir(dir:buildDirectory)
    ant.mkdir(dir:distDirectory)
}

target(compile:'Compile dsl source.') {
   depends(clean)
   ant.taskdef(name:'groovyc', classname:'org.codehaus.groovy.ant.Groovyc')
   groovyc(srcdir:sourceDirectory , destdir:buildDirectory)
}

target(jar:'Create core dsl jar.') {
   ant.copy(file:"LICENSE", todir:"${buildDirectory}")
   ant.jar(destfile:"${distDirectory}/dslengine-${version}.jar", basedir:buildDirectory)
}

target(compileTest:'Compile code for testing.') {
    depends(all)
    ant.mkdir(dir:testBuildDirectory)
    ant.taskdef(name:'groovyc', classname:'org.codehaus.groovy.ant.Groovyc')
    groovyc(srcdir:testDirectory, destdir:testBuildDirectory, classpath:"${distDirectory}/dslengine-${version}.jar", excludes:"*Test.groovy")
}

target(test:'Run tests.') {
    depends(compileTest)
    ant.jar(destfile:"${distDirectory}/dslengine-TESTING-impl.jar", basedir:testBuildDirectory, includes:"**/*.class") {
        service(type:"me.dslengine.extension.LanguageExtensionProvider", provider:"me.extension.NumberExtensionProvider")
        service(type:"me.dslengine.keyword.KeywordProvider", provider:"me.keyword.DebuggingKeywordProvider")
    }
}

target(all:'Too lazy to run individual targets.') {
    depends(init)
    depends(compile)
    depends(jar)
}

setDefaultTarget(all)
